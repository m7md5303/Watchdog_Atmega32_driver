
WATCHDOG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000780  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000047f  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <main>
  64:	0c 94 82 03 	jmp	0x704	; 0x704 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction ){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03

if(Copy_u8Direction==DIO_u8INPUT){
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	88 23       	and	r24, r24
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_voidSetPinDirection+0x22>
  8c:	75 c0       	rjmp	.+234    	; 0x178 <DIO_voidSetPinDirection+0x10c>
	switch(Copy_u8Port){
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3f 83       	std	Y+7, r19	; 0x07
  96:	2e 83       	std	Y+6, r18	; 0x06
  98:	8e 81       	ldd	r24, Y+6	; 0x06
  9a:	9f 81       	ldd	r25, Y+7	; 0x07
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	61 f1       	breq	.+88     	; 0xfa <DIO_voidSetPinDirection+0x8e>
  a2:	2e 81       	ldd	r18, Y+6	; 0x06
  a4:	3f 81       	ldd	r19, Y+7	; 0x07
  a6:	23 30       	cpi	r18, 0x03	; 3
  a8:	31 05       	cpc	r19, r1
  aa:	34 f4       	brge	.+12     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  ac:	8e 81       	ldd	r24, Y+6	; 0x06
  ae:	9f 81       	ldd	r25, Y+7	; 0x07
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	91 05       	cpc	r25, r1
  b4:	69 f0       	breq	.+26     	; 0xd0 <DIO_voidSetPinDirection+0x64>
  b6:	d3 c0       	rjmp	.+422    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
  b8:	2e 81       	ldd	r18, Y+6	; 0x06
  ba:	3f 81       	ldd	r19, Y+7	; 0x07
  bc:	23 30       	cpi	r18, 0x03	; 3
  be:	31 05       	cpc	r19, r1
  c0:	89 f1       	breq	.+98     	; 0x124 <DIO_voidSetPinDirection+0xb8>
  c2:	8e 81       	ldd	r24, Y+6	; 0x06
  c4:	9f 81       	ldd	r25, Y+7	; 0x07
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	91 05       	cpc	r25, r1
  ca:	09 f4       	brne	.+2      	; 0xce <DIO_voidSetPinDirection+0x62>
  cc:	40 c0       	rjmp	.+128    	; 0x14e <DIO_voidSetPinDirection+0xe2>
  ce:	c7 c0       	rjmp	.+398    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTA: CLR_BIT(DDRA , Copy_u8Pin); break;
  d0:	aa e3       	ldi	r26, 0x3A	; 58
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	ea e3       	ldi	r30, 0x3A	; 58
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	48 2f       	mov	r20, r24
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_voidSetPinDirection+0x82>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_voidSetPinDirection+0x7e>
  f2:	80 95       	com	r24
  f4:	84 23       	and	r24, r20
  f6:	8c 93       	st	X, r24
  f8:	b2 c0       	rjmp	.+356    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTB: CLR_BIT(DDRB , Copy_u8Pin); break;
  fa:	a7 e3       	ldi	r26, 0x37	; 55
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e7 e3       	ldi	r30, 0x37	; 55
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	48 2f       	mov	r20, r24
 106:	8a 81       	ldd	r24, Y+2	; 0x02
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_voidSetPinDirection+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_voidSetPinDirection+0xa8>
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	8c 93       	st	X, r24
 122:	9d c0       	rjmp	.+314    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTC: CLR_BIT(DDRC , Copy_u8Pin); break;
 124:	a4 e3       	ldi	r26, 0x34	; 52
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e4 e3       	ldi	r30, 0x34	; 52
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0xd2>
 146:	80 95       	com	r24
 148:	84 23       	and	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	88 c0       	rjmp	.+272    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTD: CLR_BIT(DDRD , Copy_u8Pin); break;
 14e:	a1 e3       	ldi	r26, 0x31	; 49
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPinDirection+0x100>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPinDirection+0xfc>
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	8c 93       	st	X, r24
 176:	73 c0       	rjmp	.+230    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	}
}
else if(Copy_u8Direction==DIO_u8OUTPUT){
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <DIO_voidSetPinDirection+0x114>
 17e:	6f c0       	rjmp	.+222    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
	switch(Copy_u8Port){
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	3d 83       	std	Y+5, r19	; 0x05
 188:	2c 83       	std	Y+4, r18	; 0x04
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	9d 81       	ldd	r25, Y+5	; 0x05
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	51 f1       	breq	.+84     	; 0x1e8 <DIO_voidSetPinDirection+0x17c>
 194:	2c 81       	ldd	r18, Y+4	; 0x04
 196:	3d 81       	ldd	r19, Y+5	; 0x05
 198:	23 30       	cpi	r18, 0x03	; 3
 19a:	31 05       	cpc	r19, r1
 19c:	34 f4       	brge	.+12     	; 0x1aa <DIO_voidSetPinDirection+0x13e>
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	9d 81       	ldd	r25, Y+5	; 0x05
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <DIO_voidSetPinDirection+0x154>
 1a8:	5a c0       	rjmp	.+180    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
 1aa:	2c 81       	ldd	r18, Y+4	; 0x04
 1ac:	3d 81       	ldd	r19, Y+5	; 0x05
 1ae:	23 30       	cpi	r18, 0x03	; 3
 1b0:	31 05       	cpc	r19, r1
 1b2:	71 f1       	breq	.+92     	; 0x210 <DIO_voidSetPinDirection+0x1a4>
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	91 05       	cpc	r25, r1
 1bc:	e9 f1       	breq	.+122    	; 0x238 <DIO_voidSetPinDirection+0x1cc>
 1be:	4f c0       	rjmp	.+158    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTA: SET_BIT(DDRA , Copy_u8Pin); break;
 1c0:	aa e3       	ldi	r26, 0x3A	; 58
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	ea e3       	ldi	r30, 0x3A	; 58
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_voidSetPinDirection+0x172>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_voidSetPinDirection+0x16e>
 1e2:	84 2b       	or	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	3b c0       	rjmp	.+118    	; 0x25e <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB: SET_BIT(DDRB , Copy_u8Pin); break;
 1e8:	a7 e3       	ldi	r26, 0x37	; 55
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e7 e3       	ldi	r30, 0x37	; 55
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinDirection+0x19a>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinDirection+0x196>
 20a:	84 2b       	or	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	27 c0       	rjmp	.+78     	; 0x25e <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC: SET_BIT(DDRC , Copy_u8Pin); break;
 210:	a4 e3       	ldi	r26, 0x34	; 52
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	e4 e3       	ldi	r30, 0x34	; 52
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinDirection+0x1c2>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinDirection+0x1be>
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
 236:	13 c0       	rjmp	.+38     	; 0x25e <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD: SET_BIT(DDRD , Copy_u8Pin); break;
 238:	a1 e3       	ldi	r26, 0x31	; 49
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e1 e3       	ldi	r30, 0x31	; 49
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_voidSetPinDirection+0x1ea>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_voidSetPinDirection+0x1e6>
 25a:	84 2b       	or	r24, r20
 25c:	8c 93       	st	X, r24
		}
}
}
 25e:	27 96       	adiw	r28, 0x07	; 7
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ){
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	27 97       	sbiw	r28, 0x07	; 7
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	6a 83       	std	Y+2, r22	; 0x02
 288:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value==DIO_u8LOW){
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	09 f0       	breq	.+2      	; 0x292 <DIO_voidSetPinValue+0x22>
 290:	75 c0       	rjmp	.+234    	; 0x37c <DIO_voidSetPinValue+0x10c>
		switch(Copy_u8Port){
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3f 83       	std	Y+7, r19	; 0x07
 29a:	2e 83       	std	Y+6, r18	; 0x06
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	9f 81       	ldd	r25, Y+7	; 0x07
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	91 05       	cpc	r25, r1
 2a4:	61 f1       	breq	.+88     	; 0x2fe <DIO_voidSetPinValue+0x8e>
 2a6:	2e 81       	ldd	r18, Y+6	; 0x06
 2a8:	3f 81       	ldd	r19, Y+7	; 0x07
 2aa:	23 30       	cpi	r18, 0x03	; 3
 2ac:	31 05       	cpc	r19, r1
 2ae:	34 f4       	brge	.+12     	; 0x2bc <DIO_voidSetPinValue+0x4c>
 2b0:	8e 81       	ldd	r24, Y+6	; 0x06
 2b2:	9f 81       	ldd	r25, Y+7	; 0x07
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	91 05       	cpc	r25, r1
 2b8:	69 f0       	breq	.+26     	; 0x2d4 <DIO_voidSetPinValue+0x64>
 2ba:	d3 c0       	rjmp	.+422    	; 0x462 <DIO_voidSetPinValue+0x1f2>
 2bc:	2e 81       	ldd	r18, Y+6	; 0x06
 2be:	3f 81       	ldd	r19, Y+7	; 0x07
 2c0:	23 30       	cpi	r18, 0x03	; 3
 2c2:	31 05       	cpc	r19, r1
 2c4:	89 f1       	breq	.+98     	; 0x328 <DIO_voidSetPinValue+0xb8>
 2c6:	8e 81       	ldd	r24, Y+6	; 0x06
 2c8:	9f 81       	ldd	r25, Y+7	; 0x07
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	91 05       	cpc	r25, r1
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_voidSetPinValue+0x62>
 2d0:	40 c0       	rjmp	.+128    	; 0x352 <DIO_voidSetPinValue+0xe2>
 2d2:	c7 c0       	rjmp	.+398    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTA: CLR_BIT(PORTA , Copy_u8Pin); break;
 2d4:	ab e3       	ldi	r26, 0x3B	; 59
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	eb e3       	ldi	r30, 0x3B	; 59
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinValue+0x82>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinValue+0x7e>
 2f6:	80 95       	com	r24
 2f8:	84 23       	and	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	b2 c0       	rjmp	.+356    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB: CLR_BIT(PORTB , Copy_u8Pin); break;
 2fe:	a8 e3       	ldi	r26, 0x38	; 56
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e8 e3       	ldi	r30, 0x38	; 56
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_voidSetPinValue+0xac>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_voidSetPinValue+0xa8>
 320:	80 95       	com	r24
 322:	84 23       	and	r24, r20
 324:	8c 93       	st	X, r24
 326:	9d c0       	rjmp	.+314    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC: CLR_BIT(PORTC , Copy_u8Pin); break;
 328:	a5 e3       	ldi	r26, 0x35	; 53
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e5 e3       	ldi	r30, 0x35	; 53
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	48 2f       	mov	r20, r24
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	28 2f       	mov	r18, r24
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 2e       	mov	r0, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_voidSetPinValue+0xd6>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_voidSetPinValue+0xd2>
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	8c 93       	st	X, r24
 350:	88 c0       	rjmp	.+272    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD: CLR_BIT(PORTD , Copy_u8Pin); break;
 352:	a2 e3       	ldi	r26, 0x32	; 50
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	e2 e3       	ldi	r30, 0x32	; 50
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	48 2f       	mov	r20, r24
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_voidSetPinValue+0x100>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_voidSetPinValue+0xfc>
 374:	80 95       	com	r24
 376:	84 23       	and	r24, r20
 378:	8c 93       	st	X, r24
 37a:	73 c0       	rjmp	.+230    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH){
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	8f 3f       	cpi	r24, 0xFF	; 255
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_voidSetPinValue+0x114>
 382:	6f c0       	rjmp	.+222    	; 0x462 <DIO_voidSetPinValue+0x1f2>
		switch(Copy_u8Port){
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	3d 83       	std	Y+5, r19	; 0x05
 38c:	2c 83       	std	Y+4, r18	; 0x04
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	9d 81       	ldd	r25, Y+5	; 0x05
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	91 05       	cpc	r25, r1
 396:	51 f1       	breq	.+84     	; 0x3ec <DIO_voidSetPinValue+0x17c>
 398:	2c 81       	ldd	r18, Y+4	; 0x04
 39a:	3d 81       	ldd	r19, Y+5	; 0x05
 39c:	23 30       	cpi	r18, 0x03	; 3
 39e:	31 05       	cpc	r19, r1
 3a0:	34 f4       	brge	.+12     	; 0x3ae <DIO_voidSetPinValue+0x13e>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	91 05       	cpc	r25, r1
 3aa:	61 f0       	breq	.+24     	; 0x3c4 <DIO_voidSetPinValue+0x154>
 3ac:	5a c0       	rjmp	.+180    	; 0x462 <DIO_voidSetPinValue+0x1f2>
 3ae:	2c 81       	ldd	r18, Y+4	; 0x04
 3b0:	3d 81       	ldd	r19, Y+5	; 0x05
 3b2:	23 30       	cpi	r18, 0x03	; 3
 3b4:	31 05       	cpc	r19, r1
 3b6:	71 f1       	breq	.+92     	; 0x414 <DIO_voidSetPinValue+0x1a4>
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	9d 81       	ldd	r25, Y+5	; 0x05
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	91 05       	cpc	r25, r1
 3c0:	e9 f1       	breq	.+122    	; 0x43c <DIO_voidSetPinValue+0x1cc>
 3c2:	4f c0       	rjmp	.+158    	; 0x462 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTA: SET_BIT(PORTA , Copy_u8Pin); break;
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinValue+0x172>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinValue+0x16e>
 3e6:	84 2b       	or	r24, r20
 3e8:	8c 93       	st	X, r24
 3ea:	3b c0       	rjmp	.+118    	; 0x462 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTB: SET_BIT(PORTB , Copy_u8Pin); break;
 3ec:	a8 e3       	ldi	r26, 0x38	; 56
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	e8 e3       	ldi	r30, 0x38	; 56
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	48 2f       	mov	r20, r24
 3f8:	8a 81       	ldd	r24, Y+2	; 0x02
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 2e       	mov	r0, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_voidSetPinValue+0x19a>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_voidSetPinValue+0x196>
 40e:	84 2b       	or	r24, r20
 410:	8c 93       	st	X, r24
 412:	27 c0       	rjmp	.+78     	; 0x462 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTC: SET_BIT(PORTC , Copy_u8Pin); break;
 414:	a5 e3       	ldi	r26, 0x35	; 53
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e5 e3       	ldi	r30, 0x35	; 53
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8a 81       	ldd	r24, Y+2	; 0x02
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_voidSetPinValue+0x1c2>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_voidSetPinValue+0x1be>
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	13 c0       	rjmp	.+38     	; 0x462 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTD: SET_BIT(PORTD , Copy_u8Pin); break;
 43c:	a2 e3       	ldi	r26, 0x32	; 50
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e2 e3       	ldi	r30, 0x32	; 50
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_voidSetPinValue+0x1ea>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_voidSetPinValue+0x1e6>
 45e:	84 2b       	or	r24, r20
 460:	8c 93       	st	X, r24
			}
	}

}
 462:	27 96       	adiw	r28, 0x07	; 7
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
 474:	df 93       	push	r29
 476:	cf 93       	push	r28
 478:	00 d0       	rcall	.+0      	; 0x47a <DIO_VoidSetPortDirection+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_VoidSetPortDirection+0x8>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	6a 83       	std	Y+2, r22	; 0x02
switch(Copy_u8Port){
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	3c 83       	std	Y+4, r19	; 0x04
 48c:	2b 83       	std	Y+3, r18	; 0x03
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	9c 81       	ldd	r25, Y+4	; 0x04
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	91 05       	cpc	r25, r1
 496:	d9 f0       	breq	.+54     	; 0x4ce <DIO_VoidSetPortDirection+0x5a>
 498:	2b 81       	ldd	r18, Y+3	; 0x03
 49a:	3c 81       	ldd	r19, Y+4	; 0x04
 49c:	23 30       	cpi	r18, 0x03	; 3
 49e:	31 05       	cpc	r19, r1
 4a0:	34 f4       	brge	.+12     	; 0x4ae <DIO_VoidSetPortDirection+0x3a>
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	91 05       	cpc	r25, r1
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <DIO_VoidSetPortDirection+0x50>
 4ac:	1e c0       	rjmp	.+60     	; 0x4ea <DIO_VoidSetPortDirection+0x76>
 4ae:	2b 81       	ldd	r18, Y+3	; 0x03
 4b0:	3c 81       	ldd	r19, Y+4	; 0x04
 4b2:	23 30       	cpi	r18, 0x03	; 3
 4b4:	31 05       	cpc	r19, r1
 4b6:	81 f0       	breq	.+32     	; 0x4d8 <DIO_VoidSetPortDirection+0x64>
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	9c 81       	ldd	r25, Y+4	; 0x04
 4bc:	84 30       	cpi	r24, 0x04	; 4
 4be:	91 05       	cpc	r25, r1
 4c0:	81 f0       	breq	.+32     	; 0x4e2 <DIO_VoidSetPortDirection+0x6e>
 4c2:	13 c0       	rjmp	.+38     	; 0x4ea <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTA : DDRA= Copy_u8Direction; break;
 4c4:	ea e3       	ldi	r30, 0x3A	; 58
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	80 83       	st	Z, r24
 4cc:	0e c0       	rjmp	.+28     	; 0x4ea <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTB : DDRB= Copy_u8Direction; break;
 4ce:	e7 e3       	ldi	r30, 0x37	; 55
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	80 83       	st	Z, r24
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTC : DDRC= Copy_u8Direction; break;
 4d8:	e4 e3       	ldi	r30, 0x34	; 52
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	80 83       	st	Z, r24
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTD : DDRD= Copy_u8Direction; break;
 4e2:	e1 e3       	ldi	r30, 0x31	; 49
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	80 83       	st	Z, r24

}
}
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	cf 91       	pop	r28
 4f4:	df 91       	pop	r29
 4f6:	08 95       	ret

000004f8 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
 4f8:	df 93       	push	r29
 4fa:	cf 93       	push	r28
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <DIO_VoidSetPortValue+0x6>
 4fe:	00 d0       	rcall	.+0      	; 0x500 <DIO_VoidSetPortValue+0x8>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	3c 83       	std	Y+4, r19	; 0x04
 510:	2b 83       	std	Y+3, r18	; 0x03
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	9c 81       	ldd	r25, Y+4	; 0x04
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	d9 f0       	breq	.+54     	; 0x552 <DIO_VoidSetPortValue+0x5a>
 51c:	2b 81       	ldd	r18, Y+3	; 0x03
 51e:	3c 81       	ldd	r19, Y+4	; 0x04
 520:	23 30       	cpi	r18, 0x03	; 3
 522:	31 05       	cpc	r19, r1
 524:	34 f4       	brge	.+12     	; 0x532 <DIO_VoidSetPortValue+0x3a>
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	9c 81       	ldd	r25, Y+4	; 0x04
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	61 f0       	breq	.+24     	; 0x548 <DIO_VoidSetPortValue+0x50>
 530:	1e c0       	rjmp	.+60     	; 0x56e <DIO_VoidSetPortValue+0x76>
 532:	2b 81       	ldd	r18, Y+3	; 0x03
 534:	3c 81       	ldd	r19, Y+4	; 0x04
 536:	23 30       	cpi	r18, 0x03	; 3
 538:	31 05       	cpc	r19, r1
 53a:	81 f0       	breq	.+32     	; 0x55c <DIO_VoidSetPortValue+0x64>
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	9c 81       	ldd	r25, Y+4	; 0x04
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	91 05       	cpc	r25, r1
 544:	81 f0       	breq	.+32     	; 0x566 <DIO_VoidSetPortValue+0x6e>
 546:	13 c0       	rjmp	.+38     	; 0x56e <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTA : PORTA= Copy_u8Value; break;
 548:	eb e3       	ldi	r30, 0x3B	; 59
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	80 83       	st	Z, r24
 550:	0e c0       	rjmp	.+28     	; 0x56e <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTB : PORTB= Copy_u8Value; break;
 552:	e8 e3       	ldi	r30, 0x38	; 56
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	80 83       	st	Z, r24
 55a:	09 c0       	rjmp	.+18     	; 0x56e <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTC : PORTC= Copy_u8Value; break;
 55c:	e5 e3       	ldi	r30, 0x35	; 53
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	80 83       	st	Z, r24
 564:	04 c0       	rjmp	.+8      	; 0x56e <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTD : PORTD= Copy_u8Value; break;
 566:	e2 e3       	ldi	r30, 0x32	; 50
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	80 83       	st	Z, r24

	}
	}
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin){
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28
 580:	00 d0       	rcall	.+0      	; 0x582 <DIO_u8GetPinValue+0x6>
 582:	00 d0       	rcall	.+0      	; 0x584 <DIO_u8GetPinValue+0x8>
 584:	0f 92       	push	r0
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	8a 83       	std	Y+2, r24	; 0x02
 58c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port){
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	3d 83       	std	Y+5, r19	; 0x05
 596:	2c 83       	std	Y+4, r18	; 0x04
 598:	4c 81       	ldd	r20, Y+4	; 0x04
 59a:	5d 81       	ldd	r21, Y+5	; 0x05
 59c:	42 30       	cpi	r20, 0x02	; 2
 59e:	51 05       	cpc	r21, r1
 5a0:	41 f1       	breq	.+80     	; 0x5f2 <DIO_u8GetPinValue+0x76>
 5a2:	8c 81       	ldd	r24, Y+4	; 0x04
 5a4:	9d 81       	ldd	r25, Y+5	; 0x05
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	91 05       	cpc	r25, r1
 5aa:	34 f4       	brge	.+12     	; 0x5b8 <DIO_u8GetPinValue+0x3c>
 5ac:	2c 81       	ldd	r18, Y+4	; 0x04
 5ae:	3d 81       	ldd	r19, Y+5	; 0x05
 5b0:	21 30       	cpi	r18, 0x01	; 1
 5b2:	31 05       	cpc	r19, r1
 5b4:	61 f0       	breq	.+24     	; 0x5ce <DIO_u8GetPinValue+0x52>
 5b6:	52 c0       	rjmp	.+164    	; 0x65c <DIO_u8GetPinValue+0xe0>
 5b8:	4c 81       	ldd	r20, Y+4	; 0x04
 5ba:	5d 81       	ldd	r21, Y+5	; 0x05
 5bc:	43 30       	cpi	r20, 0x03	; 3
 5be:	51 05       	cpc	r21, r1
 5c0:	51 f1       	breq	.+84     	; 0x616 <DIO_u8GetPinValue+0x9a>
 5c2:	8c 81       	ldd	r24, Y+4	; 0x04
 5c4:	9d 81       	ldd	r25, Y+5	; 0x05
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	91 05       	cpc	r25, r1
 5ca:	b9 f1       	breq	.+110    	; 0x63a <DIO_u8GetPinValue+0xbe>
 5cc:	47 c0       	rjmp	.+142    	; 0x65c <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTA: Local_u8Result=GET_BIT(PINA , Copy_u8Pin);       break;
 5ce:	e9 e3       	ldi	r30, 0x39	; 57
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	88 2f       	mov	r24, r24
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	a9 01       	movw	r20, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_u8GetPinValue+0x6a>
 5e2:	55 95       	asr	r21
 5e4:	47 95       	ror	r20
 5e6:	8a 95       	dec	r24
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_u8GetPinValue+0x66>
 5ea:	ca 01       	movw	r24, r20
 5ec:	81 70       	andi	r24, 0x01	; 1
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	35 c0       	rjmp	.+106    	; 0x65c <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTB: Local_u8Result=GET_BIT(PINB , Copy_u8Pin);       break;
 5f2:	e6 e3       	ldi	r30, 0x36	; 54
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a9 01       	movw	r20, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8GetPinValue+0x8e>
 606:	55 95       	asr	r21
 608:	47 95       	ror	r20
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_u8GetPinValue+0x8a>
 60e:	ca 01       	movw	r24, r20
 610:	81 70       	andi	r24, 0x01	; 1
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	23 c0       	rjmp	.+70     	; 0x65c <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTC: Local_u8Result=GET_BIT(PINC , Copy_u8Pin);       break;
 616:	e3 e3       	ldi	r30, 0x33	; 51
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	a9 01       	movw	r20, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8GetPinValue+0xb2>
 62a:	55 95       	asr	r21
 62c:	47 95       	ror	r20
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8GetPinValue+0xae>
 632:	ca 01       	movw	r24, r20
 634:	81 70       	andi	r24, 0x01	; 1
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	11 c0       	rjmp	.+34     	; 0x65c <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTD: Local_u8Result=GET_BIT(PIND , Copy_u8Pin);       break;
 63a:	e0 e3       	ldi	r30, 0x30	; 48
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a9 01       	movw	r20, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_u8GetPinValue+0xd6>
 64e:	55 95       	asr	r21
 650:	47 95       	ror	r20
 652:	8a 95       	dec	r24
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_u8GetPinValue+0xd2>
 656:	ca 01       	movw	r24, r20
 658:	81 70       	andi	r24, 0x01	; 1
 65a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
 65c:	89 81       	ldd	r24, Y+1	; 0x01

}
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <WATCHDOG_voidEnable>:
#include "WATCHDOG_private.h"
#include "WATCHDOG_interface.h"
#include "WATCHDOG_config.h"


void WATCHDOG_voidEnable(void){
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
SET_BIT(WDTCR, WDE);
 676:	a1 e4       	ldi	r26, 0x41	; 65
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e1 e4       	ldi	r30, 0x41	; 65
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	88 60       	ori	r24, 0x08	; 8
 682:	8c 93       	st	X, r24
}
 684:	cf 91       	pop	r28
 686:	df 91       	pop	r29
 688:	08 95       	ret

0000068a <WATCHDOG_voidDisable>:
void WATCHDOG_voidDisable(void){
 68a:	df 93       	push	r29
 68c:	cf 93       	push	r28
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
WDTCR=0b00011000;
 692:	e1 e4       	ldi	r30, 0x41	; 65
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	88 e1       	ldi	r24, 0x18	; 24
 698:	80 83       	st	Z, r24
WDTCR=0;
 69a:	e1 e4       	ldi	r30, 0x41	; 65
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	10 82       	st	Z, r1

}
 6a0:	cf 91       	pop	r28
 6a2:	df 91       	pop	r29
 6a4:	08 95       	ret

000006a6 <WATCHDOG_u8SetTimerPrescalar>:
void WATCHDOG_u8SetTimerPrescalar(u8 Copy_u8PreScalarValue){
 6a6:	df 93       	push	r29
 6a8:	cf 93       	push	r28
 6aa:	0f 92       	push	r0
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	89 83       	std	Y+1, r24	; 0x01

	WDTCR &=0b11111000;
 6b2:	a1 e4       	ldi	r26, 0x41	; 65
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	e1 e4       	ldi	r30, 0x41	; 65
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	88 7f       	andi	r24, 0xF8	; 248
 6be:	8c 93       	st	X, r24
	WDTCR |=Copy_u8PreScalarValue;
 6c0:	a1 e4       	ldi	r26, 0x41	; 65
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e1 e4       	ldi	r30, 0x41	; 65
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	90 81       	ld	r25, Z
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	89 2b       	or	r24, r25
 6ce:	8c 93       	st	X, r24
}
 6d0:	0f 90       	pop	r0
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <main>:
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "WATCHDOG_interface.h"


int main(void){
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
	WATCHDOG_u8SetTimerPrescalar(TIME1_0S);
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <WATCHDOG_u8SetTimerPrescalar>
	WATCHDOG_voidEnable();
 6e6:	0e 94 37 03 	call	0x66e	; 0x66e <WATCHDOG_voidEnable>
	DIO_voidSetPinDirection(DIO_u8PORTB , 0 , DIO_u8OUTPUT);
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTB , 0 , DIO_u8HIGH);
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	4f ef       	ldi	r20, 0xFF	; 255
 6fa:	0e 94 38 01 	call	0x270	; 0x270 <DIO_voidSetPinValue>
    WATCHDOG_voidDisable();
 6fe:	0e 94 45 03 	call	0x68a	; 0x68a <WATCHDOG_voidDisable>
 702:	ff cf       	rjmp	.-2      	; 0x702 <main+0x2a>

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
